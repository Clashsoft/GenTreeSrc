fileName(typeDecl) ::= <%
<typeDecl.packageName; format="s|\\.|/|">/<typeDecl.className>.java
%>

treeClass(typeDecl, imports) ::= <<
package <typeDecl.packageName>;

<imports:import_()>

public interface <typeDecl.className><if(typeDecl.superType)> extends <typeDecl.superType.className><endif>
{
	// =============== Static Methods ===============
	static <typeDecl.className> of(<typeDecl.properties:parameter(); separator=", ">) { return new Impl(<typeDecl.properties:argument(); separator=", ">); }

	<if(typeDecl.properties)>
	// =============== Properties ===============
	<typeDecl.properties:getterSetter()>
	<endif>
	// =============== Methods ===============
	\<P, R> R accept(<typeDecl.className>.Visitor\<P, R> visitor, P par);

	// =============== Classes ===============
	class Impl<if(typeDecl.superType)> extends <typeDecl.superType.className>.Impl<endif> implements <typeDecl.className>
	{
		<if(typeDecl.properties)>
		// =============== Fields ===============
		<typeDecl.properties:field()>
		// =============== Constructors ===============
		public Impl() {}
		public Impl(<typeDecl.properties:parameter(); separator=", ">)
		{
			<typeDecl.properties:setThis(); separator="\n">
		}

		// =============== Properties ===============
		<typeDecl.properties:getterSetterImpl()>
		<endif>
		// =============== Methods ===============
		<acceptImplRecursively(typeDecl, typeDecl)>
	}

	interface Visitor\<P, R><if(typeDecl.subTypes)> extends <typeDecl.subTypes:{s|<s.className>.Visitor\<P, R>}; separator=", "><endif>
	{
		// =============== Methods ===============
		R visit<typeDecl.className>(<typeDecl.className> <typeDecl.className>, P par);
	}
}

>>

// --------------- Helpers ---------------

import_(qualified) ::= <<
import <qualified>;

>>

acceptImpl(topDecl, typeDecl) ::= <<
@Override public \<P, R> R accept(<typeDecl.className>.Visitor\<P, R> visitor, P par) { return visitor.visit<topDecl.className>(this, par); }

>>

acceptImplRecursively(topDecl, typeDecl) ::= <%
<acceptImpl(topDecl, typeDecl)>
<if(typeDecl.superType)><acceptImplRecursively(topDecl, typeDecl.superType)><endif>
%>

// --------------- Properties ---------------

type(property) ::= <%
<if(property.style.list)>
List\<<property.type>>
<else>
<property.type>
<endif>
%>

parameter(property) ::= <%
<type(property)> <property.name>
%>

argument(property) ::= <%
<property.name>
%>

field(property) ::= <<
private <type(property)> <property.name>;

>>

getterSetter(property) ::= <%
<getter(property)>
<if(property.style.setter)>
<setter(property)>
<endif>
%>

getter(property) ::= <<
<type(property)> get<property.name; format="cap">();

>>

setter(property) ::= <<
void set<property.name; format="cap">(<type(property)> <property.name>);

>>

setThis(property) ::= <%
this.<property.name> = <property.name>;
%>

getterSetterImpl(property) ::= <%
<getterImpl(property)>
<if(property.style.setter)>
<setterImpl(property)>
<endif>
%>

getterImpl(property) ::= <<
@Override public <type(property)> get<property.name; format="cap">() { return this.<property.name>; }

>>

setterImpl(property) ::= <<
@Override public void set<property.name; format="cap">(<parameter(property)>) { <setThis(property)> }

>>
