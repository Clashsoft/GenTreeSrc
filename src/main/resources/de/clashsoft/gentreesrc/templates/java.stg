fileName(typeDecl) ::= <%
<typeDecl.packageName; format="s|\\.|/|">/<typeDecl.className>.java
%>

treeClass(config, typeDecl, imports) ::= <<
package <typeDecl.packageName>;

<imports:import_()>

public interface <typeDecl.className><if(typeDecl.superType)> extends <typeDecl.superType.className><endif>
{
	<if(!typeDecl.isAbstract)>
	// =============== Static Methods ===============
	static <typeDecl.className> of(<typeDecl.properties:parameter(); separator=", ">) { return new Impl(<typeDecl.properties:argument(); separator=", ">); }
	<endif>
	<if(typeDecl.properties)>
	// =============== Properties ===============
	<typeDecl.properties:getterSetter()>
	<endif>
	// =============== Methods ===============
	<visitTypes(config)> <visitRet(config)> accept(<typeDecl.className>.Visitor<visitTypes(config)> visitor<visitPar(config)>);
	// =============== Classes ===============
	<if(!typeDecl.isAbstract)>
	class Impl<extends_(typeDecl.superType)> implements <typeDecl.className>
	{
		<if(typeDecl.properties)>
		// =============== Fields ===============
		<typeDecl.properties:field()>
		// =============== Constructors ===============
		public Impl() {}
		public Impl(<typeDecl.properties:parameter(); separator=", ">)
		{
			<typeDecl.properties:setThis(); separator="\n">
		}

		// =============== Properties ===============
		<typeDecl.properties:getterSetterImpl()>
		<endif>
		// =============== Methods ===============
		<acceptImplRecursively(config, typeDecl, typeDecl)>
	}
	<endif>
	interface Visitor<visitTypes(config)><if(typeDecl.subTypes)> extends <typeDecl.subTypes:{s|<s.className>.Visitor<visitTypes(config)>}; separator=", "><endif>
	{
		// =============== Methods ===============
		<visitRet(config)> visit(<typeDecl.className> <typeDecl.className; format="decap"><visitPar(config)>);
	}
}

>>

// --------------- Helpers ---------------

visitTypes(config) ::= <%
<if(config.visitPar)>
	<if(config.visitRet)>
		\<P, R>
	<else>
		\<P>
	<endif>
<elseif(config.visitRet)>
	\<R>
<else>
<endif>
%>

visitRet(config) ::= <%
<if(config.visitRet)>
R
<else>
void
<endif>
%>

visitPar(config) ::= <%
<if(config.visitPar)>
, P par
<else>
<endif>
%>

extends_(typeDecl) ::= <%
<if(!typeDecl)>
<elseif(!typeDecl.isAbstract)> extends <typeDecl.className>.Impl
<else><extends_(typeDecl.superType)>
<endif>
%>

import_(qualified) ::= <<
import <qualified>;

>>

acceptImpl(config, topDecl, typeDecl) ::= <%
@Override public <visitTypes(config)> <visitRet(config)> accept(
<typeDecl.className>.Visitor<visitTypes(config)> visitor<visitPar(config)>
) { <if(config.visitRet)>return <endif>visitor.visit(this<if(config.visitPar)>, par<endif>); }
%>

acceptImplRecursively(config, topDecl, typeDecl) ::= <<
<acceptImpl(config, topDecl, typeDecl)>
<if(typeDecl.superType)><acceptImplRecursively(config, topDecl, typeDecl.superType)><endif>
>>

// --------------- Types ---------------

type(type) ::= <%
<(typeTemplate(type))(type)>
%>

typeTemplate(type) ::= <%
type_<type.class.enclosingClass.simpleName>
%>

type_NamedType(type) ::= <%
<type.name>
%>

type_ListType(type) ::= <%
List\<<type(type.elementType)>>
%>

type_OptionalType(type) ::= <%
<type(type.wrappedType)>
%>

// --------------- Properties ---------------

parameter(property) ::= <%
<type(property.type)> <property.name>
%>

argument(property) ::= <%
<property.name>
%>

field(property) ::= <<
private <type(property.type)> <property.name>;

>>

getterSetter(property) ::= <%
<getter(property)>
<setter(property)>
%>

getter(property) ::= <<
<type(property.type)> get<property.name; format="cap">();

>>

setter(property) ::= <<
void set<property.name; format="cap">(<type(property.type)> <property.name>);

>>

setThis(property) ::= <%
this.<property.name> = <property.name>;
%>

getterSetterImpl(property) ::= <%
<getterImpl(property)>
<setterImpl(property)>
%>

getterImpl(property) ::= <<
@Override public <type(property.type)> get<property.name; format="cap">() { return this.<property.name>; }

>>

setterImpl(property) ::= <<
@Override public void set<property.name; format="cap">(<parameter(property)>) { <setThis(property)> }

>>
